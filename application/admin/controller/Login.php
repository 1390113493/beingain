<?php


namespace app\admin\controller;


use app\admin\model\AdminUser as AdminModel;
use app\admin\model\AdminLoginLog as LogModel;
use think\Controller;
use think\Db;

class Login extends Controller
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        if (cookie('admin_username')) {
            $this->redirect('/admin');
        }
    }

    public function index()
    {
        return view('login');
    }


    // 登录
    public function login()
    {
        $username = $this->request->param('username');
        $password = $this->request->param('password');
        $captcha = $this->request->param('vercode');
        $remember = $this->request->param('remember');
        $ip = $this->request->ip();
        $agent = $_SERVER['HTTP_USER_AGENT'];

        if (!($username && $password && $captcha) ){
            return [
                'code'=>-1,
                'msg'=>'不能为空！'
            ];
        }

        if(!captcha_check($captcha)){
            return [
                'code'=>-1,
                'msg'=>'验证码错误！',
            ];
        }

        $user = AdminModel::where('username', $username)->find();
        if($user){
            if ($user->getAttr("password") == md5($password)){
                session('admin_username',$user['username']);
                session('admin_id',$user['id'] );
                $token = self::generateToken();
                if($remember  == "on"){
                    cookie('admin_username',null);
                    cookie('admin_token',null);
                    cookie('admin_username',$username,3600*24*7);
                    cookie('admin_token',$token,3600*24*7);
                }else{
                    cookie('admin_username',null);
                    cookie('admin_token',null);
                    cookie('admin_username',$username);
                    cookie('admin_token',$token);
                }
                $user->token = $token;
                $res = $user->save();
                if ($res){
                    $this->login_log($user->id, $ip, $agent);
                    return [
                        'code'=>0,
                        'msg'=>'登录成功！',
                        "data"=>[
                            "access_token"=>$token
                        ]
                    ];
                }

            }else{
                return [
                    'code'=>-1,
                    'msg'=>'密码错误！'
                ];
            }
        }else{
            return [
                'code'=>-1,
                'msg'=>'账号不存在'
            ];
        }


    }

    public function login_log($uid, $ip, $agent)
    {
        $data = [
            'uid' => $uid,
            'ip' => $ip,
            'agent' => $agent
        ];
        $log = new LogModel;
        $log->save($data);
    }


    // 获取token
    public  static  function getRandChar($length)
    {
        $str = null;
        $strPol = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz";
        $max = strlen($strPol) - 1;

        for ($i = 0;
             $i < $length;
             $i++) {
            $str .= $strPol[rand(0, $max)];
        }

        return $str;
    }
    // 生成令牌
    public static function generateToken()
    {
        $randChar = self::getRandChar(32);
        $timestamp = $_SERVER['REQUEST_TIME_FLOAT'];
        $tokenSalt = 'GJUHMkojsojsnafftswiwiwDEDeqfshqs12445627672ksoksow';
        return md5($randChar . $timestamp . $tokenSalt);
    }


}